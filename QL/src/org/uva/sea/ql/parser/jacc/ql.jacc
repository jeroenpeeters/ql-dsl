%package org.uva.sea.ql.parser.jacc
%class QLParser
%interface QLTokens
%semantic org.uva.sea.ql.ast.ASTNode 
%start top

%token FORM
%token <IntLiteral> INT
%token <TextLiteral> TEXT
%token <BooleanLiteral> BOOL

%token <Identifier> IDENT
%token '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')' '{' '}' ':' '"' ','
%token IF ELSE
%token <DataType> DT_BOOLEAN DT_INTEGER DT_MONEY DT_TEXT

%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

%type <Form> frm
%type <CompoundStatement> cmpnd_stmnt
%type <Question> quest
%type <Expression> expr
%type <Statement> stmnt else_stmnt
%type <IfStatement> if_stmnt 
%type <Type> data_type
%type <ExpressionList> expr_list

%{
import org.uva.sea.ql.ast.*;
import org.uva.sea.ql.ast.expression.*;
import org.uva.sea.ql.ast.expression.literal.*;
import org.uva.sea.ql.ast.statement.*;
import org.uva.sea.ql.ast.type.*;
%}

%%

 top 			: frm	 					{ formResult = $1; }
 				| expr						{ exprResult = $1; }
 				| stmnt						{ stmntResult = $1; }
     			; 
 
 frm    		: FORM IDENT '{' cmpnd_stmnt '}'	{ $$ = new Form($2, $4); }
 				;
 				
 cmpnd_stmnt 	: stmnt					{ $$ = new CompoundStatement($1); }
 				| cmpnd_stmnt stmnt		{ $1.add($2); $$ = $1; }
 				;
 				
 stmnt			: if_stmnt				{ $$ = $1; }
 				| quest					{ $$ = $1; }
 				| label					{ $$ = $1; }
 				; 

 if_stmnt		: IF '(' expr ')' '{' cmpnd_stmnt '}' 						{ $$ = new IfStatement($3, $6); } 
 				| IF '(' expr ')' '{' cmpnd_stmnt '}' ELSE else_stmnt		{ $$ = new IfElseStatement($3, $6, $9); } 
				;
				
 else_stmnt		: '{' cmpnd_stmnt '}' 	{ $$ = $2; }
				| if_stmnt				{ $$ = $1; }
				;

 expr	 		: '+' expr	%prec UPLUS { $$ = new Pos($2); } 
				| '-' expr	%prec UMIN  { $$ = new Neg($2); }
				| '!' expr %prec UNOT  	{ $$ = new Not($2); }
				| expr '*' expr			{ $$ = new Mul($1, $3); }
				| expr '/' expr 		{ $$ = new Div($1, $3); }
				| expr '+' expr			{ $$ = new Add($1, $3); }
				| expr '-' expr			{ $$ = new Sub($1, $3); }
				| expr EQ expr		    { $$ = new Eq($1, $3); }
				| expr NEQ expr			{ $$ = new NEq($1, $3); }
				| expr '>' expr			{ $$ = new GT($1, $3); }
				| expr '<' expr			{ $$ = new LT($1, $3); }
				| expr GEQ expr			{ $$ = new GEq($1, $3); }
				| expr LEQ expr			{ $$ = new LEq($1, $3); }
				| expr AND expr	    	{ $$ = new And($1, $3); }
			    | expr OR expr  		{ $$ = new Or($1, $3); }
				| INT					{ $$ = $1; }
				| BOOL					{ $$ = $1; }
				| IDENT         		{ $$ = $1; }
				| '(' expr ')'			{ $$ = $2; }
				; 
			 	
 quest   		: IDENT ':' TEXT data_type 	{ $$ = new Question($1, $3, $4); }
         		;
 
 label			: TEXT ':' expr_list		{ $$ = new Label($1, $3); }
 				;
 expr_list		: expr						{ $$ = new ExpressionList($1);}
 				| expr_list ',' expr		{ $1.add($3); $$ = $1; }
 				;
         		
 data_type		: DT_BOOLEAN 				{ $$ = new BooleanType(); }
 				| DT_INTEGER 				{ $$ = new IntegerType(); }
 				| DT_MONEY 					{ $$ = new MoneyType(); }
 				| DT_TEXT					{ $$ = new TextType(); }
				;
%%	
							
private QLLexer lexer; 

private Form formResult;

private Expression exprResult;

private Statement stmntResult;

public Form getFormResult() {
  return formResult;
}

public Expression getExpressionResult() {
  return exprResult;
}

public Statement getStatementResult() {
  return stmntResult;
}

public QLParser(QLLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(msg); 
}
